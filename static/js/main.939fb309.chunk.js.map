{"version":3,"sources":["components/FetchPanel.tsx","components/Joke.tsx","components/JokeList.tsx","components/JokePage.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["FetchPanel","props","className","src","alt","onClick","onFetch","Joke","votes","text","upvote","id","downvote","console","log","style","borderColor","React","memo","JokeList","jokes","handleVote","renderedJokes","map","joke","JokePage","parsedJokes","JSON","parse","window","localStorage","getItem","useState","setJokes","isLoading","setIsLoading","seenJokes","Set","j","useEffect","length","getJokes","sortJokes","a","fetchedJokes","axios","get","headers","Accept","has","data","newJoke","push","setItem","stringify","sort","b","delta","prevJokes","App","basename","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.939fb309.chunk.js","sourcesContent":["import React from 'react';\r\nimport './FetchPanel.css';\r\n\r\n// Defines the shape of the props the JokeList expects\r\ninterface FetchPanelProps {\r\n  onFetch: () => void;\r\n}\r\n\r\nconst FetchPanel: React.FC<FetchPanelProps> = (props) => {\r\n  return (\r\n    <div className='FetchPanel'>\r\n      <h1 className='FetchPanel__title'>\r\n        <span>Dad</span> Jokes\r\n      </h1>\r\n      <img\r\n        src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\r\n        alt='Crying with laughter Emoji'\r\n      />\r\n      <button className='FetchPanel__btn-more' onClick={props.onFetch}>\r\n        Fetch Jokes\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchPanel;\r\n","import React from 'react';\r\nimport { IJoke } from '../interfaces';\r\nimport './Joke.css';\r\n\r\ninterface IJokeProps {\r\n  upvote: () => void;\r\n  downvote: () => void;\r\n}\r\n\r\n// Needing FC<IJokeProps> and props: IJokeProps seems to be redundant: One or the other will suffice!\r\n// const Joke = ({ text, id, votes }: IJoke, { upvote, downvote }: IJokeProps) => {\r\nconst Joke = (props: IJokeProps & IJoke) => {\r\n  const { votes, text, id, upvote, downvote } = props;\r\n\r\n  const getColor = () => {\r\n    if (votes >= 15) {\r\n      return '#4CAF50';\r\n    } else if (votes >= 12) {\r\n      return '#8BC34A';\r\n    } else if (votes >= 9) {\r\n      return '#CDDC39';\r\n    } else if (votes >= 6) {\r\n      return '#FFEB3B';\r\n    } else if (votes >= 3) {\r\n      return '#FFC107';\r\n    } else if (votes >= 0) {\r\n      return '#FF9800';\r\n    } else {\r\n      return '#f44336';\r\n    }\r\n  };\r\n\r\n  const getEmoji = () => {\r\n    if (votes >= 15) {\r\n      return 'em em-rolling_on_the_floor_laughing';\r\n    } else if (votes >= 12) {\r\n      return 'em em-laughing';\r\n    } else if (votes >= 9) {\r\n      return 'em em-smiley';\r\n    } else if (votes >= 6) {\r\n      return 'em em-slightly_smiling_face';\r\n    } else if (votes >= 3) {\r\n      return 'em em-neutral_face';\r\n    } else if (votes >= 0) {\r\n      return 'em em-confused';\r\n    } else {\r\n      return 'em em-angry';\r\n    }\r\n  };\r\n\r\n  console.log('RERENDER');\r\n\r\n  return (\r\n    <div className='Joke'>\r\n      <div className='Joke__buttons'>\r\n        <i className='fas fa-arrow-up' onClick={upvote}></i>\r\n        <span className='Joke__votes' style={{ borderColor: getColor() }}>\r\n          {votes}\r\n        </span>\r\n        <i className='fas fa-arrow-down' onClick={downvote}></i>\r\n      </div>\r\n      <div className='Joke__text'>{text}</div>\r\n      <div className='Joke__smiley'>\r\n        <i className={getEmoji()} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Joke);\r\n","import React from 'react';\r\nimport './JokeList.css';\r\nimport Joke from './Joke';\r\n\r\nimport { IJoke } from '../interfaces';\r\n\r\n// Defines the shape of the props the JokeList expects\r\ninterface JokeListProps {\r\n  jokes: IJoke[];\r\n  handleVote: (id: string, delta: number) => void;\r\n}\r\n\r\nconst JokeList: React.FC<JokeListProps> = ({ jokes, handleVote }) => {\r\n  const renderedJokes = jokes.map((joke) => {\r\n    return (\r\n      <Joke\r\n        key={joke.id}\r\n        id={joke.id}\r\n        text={joke.text}\r\n        votes={joke.votes}\r\n        upvote={() => handleVote(joke.id, 1)}\r\n        downvote={() => handleVote(joke.id, -1)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    // <div className='JokeList'>\r\n    //   <FetchPanel onFetch={handleClick} />\r\n    //   <div className='JokeList__jokes'>{jokes && renderedJokes}</div>\r\n    // </div>\r\n    // <div className='JokeList'>\r\n    <div className='JokeList'>{jokes && renderedJokes}</div>\r\n    // </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(JokeList);\r\n","import React, { useEffect, useState } from 'react';\r\nimport FetchPanel from './FetchPanel';\r\nimport JokeList from './JokeList';\r\nimport axios from 'axios';\r\nimport { IJoke } from '../interfaces';\r\nimport './JokePage.css';\r\n\r\nconst JOKE_API_URL = 'https://icanhazdadjoke.com/';\r\n\r\nconst numJokesToFetch = 10;\r\n\r\nfunction JokePage() {\r\n  // Set jokes to those in our local storage. OR if none exist, parsing \"[]\" means empty array\r\n  const parsedJokes = JSON.parse(window.localStorage.getItem('jokes') || '[]');\r\n  const [jokes, setJokes] = useState<IJoke[] | []>(parsedJokes);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  // Set to help us keep track of which jokes are unique\r\n  const seenJokes = new Set(jokes.map((j) => j.text));\r\n\r\n  useEffect(() => {\r\n    if (jokes.length === 0) getJokes();\r\n    // We have jokes, but they may not be sorted yet\r\n    else setJokes(sortJokes(jokes));\r\n    console.log('how often am I called?');\r\n  }, []);\r\n\r\n  const getJokes = async () => {\r\n    const fetchedJokes = [];\r\n\r\n    // Fetch unique jokes until we have the amount desired\r\n    while (fetchedJokes.length < numJokesToFetch) {\r\n      // Have to set a config object with the appropriate headers, as the joke API returns HTML!\r\n      const joke = await axios.get(JOKE_API_URL, {\r\n        headers: { Accept: 'application/json' },\r\n      });\r\n\r\n      if (!seenJokes.has(joke.data.joke)) {\r\n        // Todo: Prevent duplicate jokes (based on their ID)\r\n        const newJoke: IJoke = {\r\n          text: joke.data.joke,\r\n          id: joke.data.id,\r\n          votes: 0,\r\n          // upvote: () => handleVote(joke.data.id, 1),\r\n          // downvote: () => handleVote(joke.data.id, -1),\r\n        };\r\n\r\n        fetchedJokes.push(newJoke);\r\n      }\r\n    }\r\n\r\n    // Set state with fetched jokes\r\n    setJokes([...sortJokes(jokes), ...fetchedJokes]);\r\n    setIsLoading(false);\r\n\r\n    // Local Storage only stores strings -- so convert jokes object to string\r\n    window.localStorage.setItem('jokes', JSON.stringify(jokes));\r\n  };\r\n\r\n  const handleVote = (id: string, delta: number) => {\r\n    setJokes((prevJokes) => {\r\n      return prevJokes.map((joke) => {\r\n        return id === joke.id ? { ...joke, votes: joke.votes + delta } : joke;\r\n      });\r\n    });\r\n    window.localStorage.setItem('jokes', JSON.stringify(jokes));\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setIsLoading(true);\r\n    getJokes();\r\n  };\r\n\r\n  const sortJokes = (jokes: IJoke[]) => {\r\n    return jokes.sort((a, b) => b.votes - a.votes);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='JokeList__spinner'>\r\n        <i className='far fa-8x fa-laugh fa-spin' />\r\n        <h1 className='JokeList__title'>Loading</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className='JokePage'>\r\n      <FetchPanel onFetch={handleClick} />\r\n      <JokeList jokes={jokes} handleVote={handleVote} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default JokePage;\r\n","import React from 'react';\nimport './App.css';\nimport JokePage from './components/JokePage';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nconst App: React.FC = () => {\n  return (\n    <Router basename='/React-Dad-Jokes'>\n      <Routes>\n        <Route path='/' element={<JokePage />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}