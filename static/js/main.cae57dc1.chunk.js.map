{"version":3,"sources":["Joke.tsx","JokeList.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Joke","props","votes","text","upvote","id","downvote","console","log","className","onClick","style","borderColor","React","memo","JokeList","parsedJokes","JSON","parse","window","localStorage","getItem","useState","jokes","setJokes","isLoading","setIsLoading","seenJokes","Set","map","j","useEffect","length","getJokes","sortJokes","a","fetchedJokes","numJokesToFetch","axios","get","headers","Accept","joke","has","data","newJoke","push","setItem","stringify","handleVote","delta","prevJokes","sort","b","renderedJokes","src","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae57dc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IJoke } from './JokeList';\r\nimport './Joke.css';\r\n\r\ninterface IJokeProps {\r\n  upvote: () => void;\r\n  downvote: () => void;\r\n}\r\n\r\n// Needing FC<IJokeProps> and props: IJokeProps seems to be redundant: One or the other will suffice!\r\n// const Joke = ({ text, id, votes }: IJoke, { upvote, downvote }: IJokeProps) => {\r\nconst Joke = (props: IJokeProps & IJoke) => {\r\n  const { votes, text, id, upvote, downvote } = props;\r\n\r\n  const getColor = () => {\r\n    if (votes >= 15) {\r\n      return '#4CAF50';\r\n    } else if (votes >= 12) {\r\n      return '#8BC34A';\r\n    } else if (votes >= 9) {\r\n      return '#CDDC39';\r\n    } else if (votes >= 6) {\r\n      return '#FFEB3B';\r\n    } else if (votes >= 3) {\r\n      return '#FFC107';\r\n    } else if (votes >= 0) {\r\n      return '#FF9800';\r\n    } else {\r\n      return '#f44336';\r\n    }\r\n  };\r\n\r\n  const getEmoji = () => {\r\n    if (votes >= 15) {\r\n      return 'em em-rolling_on_the_floor_laughing';\r\n    } else if (votes >= 12) {\r\n      return 'em em-laughing';\r\n    } else if (votes >= 9) {\r\n      return 'em em-smiley';\r\n    } else if (votes >= 6) {\r\n      return 'em em-slightly_smiling_face';\r\n    } else if (votes >= 3) {\r\n      return 'em em-neutral_face';\r\n    } else if (votes >= 0) {\r\n      return 'em em-confused';\r\n    } else {\r\n      return 'em em-angry';\r\n    }\r\n  };\r\n\r\n  console.log('RERENDER');\r\n\r\n  return (\r\n    <div className='Joke'>\r\n      <div className='Joke__buttons'>\r\n        <i className='fas fa-arrow-up' onClick={upvote}></i>\r\n        <span className='Joke__votes' style={{ borderColor: getColor() }}>\r\n          {votes}\r\n        </span>\r\n        <i className='fas fa-arrow-down' onClick={downvote}></i>\r\n      </div>\r\n      <div className='Joke__text'>{text}</div>\r\n      <div className='Joke__smiley'>\r\n        <i className={getEmoji()} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Joke);\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport './JokeList.css';\r\nimport Joke from './Joke';\r\nimport axios from 'axios';\r\n\r\nconst JOKE_API_URL = 'https://icanhazdadjoke.com/';\r\n\r\n// Defines the shape of our \"Joke\", which we pass as a prop(s) to a Joke component\r\nexport interface IJoke {\r\n  id: string;\r\n  text: string;\r\n  votes: number;\r\n}\r\n\r\n// Defines the shape of the props the JokeList expects\r\ninterface JokeListProps {\r\n  numJokesToFetch: number;\r\n}\r\n\r\nconst JokeList: React.FC<JokeListProps> = (props) => {\r\n  // Set jokes to those in our local storage. OR if none exist, parsing \"[]\" means empty array\r\n  const parsedJokes = JSON.parse(window.localStorage.getItem('jokes') || '[]');\r\n  const [jokes, setJokes] = useState<IJoke[] | []>(parsedJokes);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n  // Set to help us keep track of which jokes are unique\r\n  const seenJokes = new Set(jokes.map((j) => j.text));\r\n\r\n  useEffect(() => {\r\n    if (jokes.length === 0) getJokes();\r\n    // We have jokes, but they may not be sorted yet\r\n    else setJokes(sortJokes(jokes));\r\n    console.log('how often am I called?');\r\n  }, []);\r\n\r\n  const getJokes = async () => {\r\n    const fetchedJokes = [];\r\n\r\n    // Fetch unique jokes until we have the amount desired\r\n    while (fetchedJokes.length < props.numJokesToFetch) {\r\n      // Have to set a config object with the appropriate headers, as the joke API returns HTML!\r\n      const joke = await axios.get(JOKE_API_URL, {\r\n        headers: { Accept: 'application/json' },\r\n      });\r\n\r\n      if (!seenJokes.has(joke.data.joke)) {\r\n        // Todo: Prevent duplicate jokes (based on their ID)\r\n        const newJoke: IJoke = {\r\n          text: joke.data.joke,\r\n          id: joke.data.id,\r\n          votes: 0,\r\n          // upvote: () => handleVote(joke.data.id, 1),\r\n          // downvote: () => handleVote(joke.data.id, -1),\r\n        };\r\n\r\n        fetchedJokes.push(newJoke);\r\n      }\r\n    }\r\n\r\n    // Set state with fetched jokes\r\n    setJokes([...sortJokes(jokes), ...fetchedJokes]);\r\n    setIsLoading(false);\r\n\r\n    // Local Storage onlys tores strings -- so convert jokes object to string\r\n    window.localStorage.setItem('jokes', JSON.stringify(jokes));\r\n  };\r\n\r\n  const handleVote = (id: string, delta: number) => {\r\n    setJokes((prevJokes) => {\r\n      return prevJokes.map((joke) => {\r\n        return id === joke.id ? { ...joke, votes: joke.votes + delta } : joke;\r\n      });\r\n    });\r\n    window.localStorage.setItem('jokes', JSON.stringify(jokes));\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setIsLoading(true);\r\n    getJokes();\r\n  };\r\n\r\n  const sortJokes = (jokes: IJoke[]) => {\r\n    return jokes.sort((a, b) => b.votes - a.votes);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className='JokeList__spinner'>\r\n        <i className='far fa-8x fa-laugh fa-spin' />\r\n        <h1 className='JokeList__title'>Loading</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const renderedJokes = jokes.map((joke) => {\r\n    return (\r\n      <Joke\r\n        key={joke.id}\r\n        id={joke.id}\r\n        text={joke.text}\r\n        votes={joke.votes}\r\n        upvote={() => handleVote(joke.id, 1)}\r\n        downvote={() => handleVote(joke.id, -1)}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className='JokeList'>\r\n      <div className='JokeList__sidebar'>\r\n        <h1 className='JokeList__title'>\r\n          <span>Dad</span> Jokes\r\n        </h1>\r\n        <img\r\n          src='https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg'\r\n          alt='Crying with laughter Emoji'\r\n        />\r\n        <button className='JokeList__btn-more' onClick={handleClick}>\r\n          Fetch Jokes\r\n        </button>\r\n      </div>\r\n      <div className='JokeList__jokes'>{jokes && renderedJokes}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(JokeList);\r\n","import React from 'react';\nimport './App.css';\nimport JokeList from './JokeList';\n\nconst App: React.FC = () => {\n  return (\n    <div className='App'>\n      <JokeList numJokesToFetch={10} />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}